// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.0;

import "../coffeecore/Ownable.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is
    Ownable,
    ConsumerRole,
    DistributorRole,
    FarmerRole,
    RetailerRole
{
    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint256 upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 public sku;

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint256 => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping(uint256 => string[]) itemsHistory;

    // Define enum 'State' with the following values:
    enum State {
        Harvested, // 0
        Processed, // 1
        Packed, // 2
        ForSale, // 3
        Sold, // 4
        Shipped, // 5
        Received, // 6
        Purchased // 7
    }

    State constant defaultState = State.Harvested;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        uint256 productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
        string farmerDocumentID; // IPFS content identifier for an uploaded document
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint256 indexed upc);
    event Processed(uint256 indexed upc);
    event Packed(uint256 indexed upc);
    event ForSale(uint256 indexed upc);
    event Sold(uint256 indexed upc);
    event Shipped(uint256 indexed upc);
    event Received(uint256 indexed upc);
    event Purchased(uint256 indexed upc);

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address, "invalid caller");
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price, "not paid enough");
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint256 _upc) {
        _;
        uint256 _price = items[_upc].productPrice;
        uint256 amountToReturn = msg.value - _price;
        payable(items[_upc].consumerID).transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint256 _upc) {
        require(items[_upc].itemState == State.Harvested, "not harvested");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint256 _upc) {
        require(items[_upc].itemState == State.Processed, "not processed");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint256 _upc) {
        require(items[_upc].itemState == State.Packed, "not packed");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint256 _upc) {
        require(items[_upc].itemState == State.ForSale, "not forSale");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint256 _upc) {
        require(items[_upc].itemState == State.Sold, "not sold");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint256 _upc) {
        require(items[_upc].itemState == State.Shipped, "not shipped");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint256 _upc) {
        require(items[_upc].itemState == State.Received, "not received");
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint256 _upc) {
        require(items[_upc].itemState == State.Purchased, "not purchased");
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() Ownable() {
        sku = 1;
        upc = 1;
    }

    // Define a function 'kill' if required
    function kill() public {
        if (msg.sender == origOwner) {
            address payable _origOwner = payable(origOwner);
            selfdestruct(_origOwner);
        }
    }

    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint256 _upc,
        address _originFarmerID,
        string memory _originFarmName,
        string memory _originFarmInformation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory _productNotes,
        string memory _farmerDocumentID
    ) public onlyFarmer() {
        // Add the new item as part of Harvest
        items[_upc] = Item(
            sku,
            _upc,
            msg.sender,
            _originFarmerID,
            _originFarmName,
            _originFarmInformation,
            _originFarmLatitude,
            _originFarmLongitude,
            sku + _upc,
            _productNotes,
            0,
            defaultState,
            address(0),
            address(0),
            address(0),
            _farmerDocumentID
        );
        // Increment sku
        sku = sku + 1;
        // Emit the appropriate event
        emit Harvested(items[_upc].upc);
    }

    // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
    function processItem(uint256 _upc)
        public
        onlyFarmer()
        verifyCaller(items[_upc].originFarmerID)
        harvested(_upc)
    {
        Item memory _item = items[_upc];
        _item.itemState = State.Processed;
        items[_upc] = _item;
        // Emit the appropriate event
        emit Processed(items[_upc].upc);
    }

    // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint256 _upc)
        public
        onlyFarmer()
        verifyCaller(items[_upc].originFarmerID)
        processed(_upc)
    {
        // Update the appropriate fields
        Item memory _item = items[_upc];
        _item.itemState = State.Packed;
        items[_upc] = _item;
        // Emit the appropriate event
        emit Packed(items[_upc].upc);
    }

    // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint256 _upc, uint256 _price)
        public
        onlyFarmer()
        verifyCaller(items[_upc].originFarmerID)
        packed(_upc)
    {
        // Update the appropriate fields
        Item memory _item = items[_upc];
        _item.productPrice = _price;
        _item.itemState = State.ForSale;
        items[_upc] = _item;
        // Emit the appropriate event
        emit ForSale(items[_upc].upc);
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint256 _upc)
        public
        payable
        onlyDistributor()
        forSale(_upc)
        paidEnough(items[_upc].productPrice)
        checkValue(_upc)
    {
        Item memory _item = items[_upc];
        // Update the appropriate fields - ownerID, distributorID, itemState
        address oldOwner = _item.ownerID;
        _item.ownerID = msg.sender;
        _item.distributorID = msg.sender;
        _item.itemState = State.Sold;
        items[_upc] = _item;
        // Transfer money to farmer
        (bool success, ) = payable(oldOwner).call{value: _item.productPrice}(
            ""
        );
        require(success);
        // emit the appropriate event
        emit Sold(items[_upc].upc);
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function shipItem(uint256 _upc) public onlyDistributor() sold(_upc) {
        // Update the appropriate fields
        Item memory _item = items[_upc];
        _item.itemState = State.Shipped;
        items[_upc] = _item;
        // Emit the appropriate event
        emit Shipped(items[_upc].upc);
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint256 _upc) public onlyRetailer() shipped(_upc) {
        // Update the appropriate fields - ownerID, retailerID, itemState
        Item memory _item = items[_upc];
        _item.ownerID = msg.sender;
        _item.retailerID = msg.sender;
        _item.itemState = State.Received;
        items[_upc] = _item;
        // Emit the appropriate event
        emit Received(items[_upc].upc);
    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint256 _upc) public received(_upc) onlyConsumer() {
        // Update the appropriate fields - ownerID, consumerID, itemState
        Item memory _item = items[_upc];
        _item.ownerID = msg.sender;
        _item.consumerID = msg.sender;
        _item.itemState = State.Purchased;
        items[_upc] = _item;
        // Emit the appropriate event
        emit Purchased(items[_upc].upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            address ownerID,
            address originFarmerID,
            string memory originFarmName,
            string memory originFarmInformation,
            string memory originFarmLatitude,
            string memory originFarmLongitude
        )
    {
        // Assign values to the 8 parameters
        Item memory _item = items[_upc];

        itemSKU = _item.sku;
        itemUPC = _item.upc;
        ownerID = _item.ownerID;
        originFarmerID = _item.originFarmerID;
        originFarmName = _item.originFarmName;
        originFarmInformation = _item.originFarmInformation;
        originFarmLatitude = _item.originFarmLatitude;
        originFarmLongitude = _item.originFarmLongitude;

        return (
            itemSKU,
            itemUPC,
            ownerID,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            uint256 productID,
            string memory productNotes,
            uint256 productPrice,
            uint256 itemState,
            address distributorID,
            address retailerID,
            address consumerID,
            string memory farmerDocumentID
        )
    {
        // Assign values to the 9 parameters
        Item memory _item = items[_upc];

        itemSKU = _item.sku;
        itemUPC = _item.upc;
        productID = _item.productID;
        productNotes = _item.productNotes;
        productPrice = _item.productPrice;
        itemState = uint256(_item.itemState);
        distributorID = _item.distributorID;
        retailerID = _item.retailerID;
        consumerID = _item.consumerID;
        farmerDocumentID = _item.farmerDocumentID;

        return (
            itemSKU,
            itemUPC,
            productID,
            productNotes,
            productPrice,
            itemState,
            distributorID,
            retailerID,
            consumerID,
            farmerDocumentID
        );
    }

    function getAccountTypes()
        external
        view
        returns (
            bool,
            bool,
            bool,
            bool
        )
    {
        bool isFarmer = isFarmer(msg.sender);
        bool isDistributor = isDistributor(msg.sender);
        bool isRetailer = isRetailer(msg.sender);
        bool isConsumer = isConsumer(msg.sender);

        return (isFarmer, isDistributor, isRetailer, isConsumer);
    }
}
